<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>i2c on CrowPi goes Java</title><link>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/tags/i2c/</link><description>Recent content in i2c on CrowPi goes Java</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/tags/i2c/index.xml" rel="self" type="application/rss+xml"/><item><title>7-Segment Anzeige</title><link>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/seven-segment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/seven-segment/</guid><description>Funktionsweise Die 7-Segment Anzeige auf dem CrowPi besteht aus 4 verschiedenen Ziffern, welche jeweils die Werte 0-9 sowie A-F darstellen können. Der Name ist dabei auch Programm, da jede Ziffer grundsätzlich aus 7 verschiedenen Segmenten besteht, welche je nach Zustand (an/aus) dann die verschiedenen Werte darstellen können. Dies bedeutet jedoch auch, dass bei der Anzeige auf dem CrowPi insgesamt 33 verschiedene Segmente existieren (4x 7-Segment, 4x Dezimalpunkt, 1x Doppelpunkt), welche alle einzeln angeschlossen und gesteuert werden müssten.</description></item><item><title>I²C</title><link>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/hardware/i2c/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/hardware/i2c/</guid><description>Das Wichtigste in Kürze I²C (gesprochen Englisch als I-Squared-C) ist ein ursprünglich von Philips erfundener Bus. Er ist als klassischer Master-Slave-Bus konzipiert. Hierbei wird eine Datenübertragung immer durch einen Master initiiert. Auch ein Aufbau in einem Multi-Master System ist möglich. Angeschlossen wird I²C über zwei Signalleitungen (Datenleitung und Taktleitung). Die Übertragungsrate des Buses kann je nach Taktrate zwischen 0.1 Mbit/s bis zu 3.4 Mbit/s liegen. Sofern nur eine unidirektionale Verbindung nötig ist, wäre sogar 5.</description></item><item><title>LCD Display</title><link>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/lcd-display/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/lcd-display/</guid><description>Funktionsweise Beim LCD Display handelt es sich um eine der komplexesten Komponenten des CrowPi. Diese betrifft sowohl die Ansteuerung in der Software, als auch die Funktionalität des Displays an sich. Das LCD-Display verfügt auf 2 Zeilen jeweils über 16 kleine Pixelfelder. Diese bestehen aus je 5x8 Pixeln. Jedes dieser Pixel wird von den Mikrocontrollern des Displays einzeln angesteuert um so Buchstaben, Zahlen und Sonderzeichen zu zeigen. Auf diese Weise können also bis zu 32 Zeichen gleichzeitig angezeigt werden.</description></item><item><title>Lichtsensor</title><link>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/light-sensor/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fhnw-ip5-ip6.github.io/CrowPiGoesJavaTutorial/de/components/light-sensor/</guid><description>Funktionsweise Der Lichtsensor nutzt photoelektronische Effekte, um Lichteinstrahlung in ein elektrisches Signal zu wandeln. Dieses Signal kann mittels Elektronik so skaliert werden, dass ein Messwert in der Einheit Lux entsteht. Beim CrowPi wird dazu der Umgebungslichtsensor BH1750 verwendet. Dieser arbeitet mit einer Photodiode. Zusätzlich erlaubt der verwendete Sensor eine Konfiguration der Messgenauigkeit. Er kann mit 3 verschiedenen Auflösungen betrieben werden. Diese sind: 0.5 Lux, 1 Lux oder 4 Lux. Die Zeit, die für eine Messung benötigt wird, schwankt dabei massiv.</description></item></channel></rss>